version: '3.4'

services:
  kubeweb:
    image: ${DOCKER_REGISTRY-}kubeweb
    build:
      context: .
      dockerfile: KubeWeb/Dockerfile
    depends_on:
      db:
        condition: service_healthy
    ports:
      - 80:80

  mongo:
    image: mongo:latest
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    ports:
      - "27017:27017"

  mongo-express:
    image: mongo-express
    restart: always
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: example
      ME_CONFIG_MONGODB_URL: mongodb://root:example@mongo:27017/


  kubeapimongo:
    image: ${DOCKER_REGISTRY-}kubeapimongo
    build:
      context: .
      dockerfile: KubeApiMongo/Dockerfile
    ports:
       - 5001:80
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongo mongo:27017/test --quiet
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s 

  kubeapi:
    image: ${DOCKER_REGISTRY-}kubeapi
    build:
      context: .
      dockerfile: KubeApi/Dockerfile
    ports:
      - 81:80

  db:
    image: "mcr.microsoft.com/mssql/server:2019-latest"
    ports:
    - "1433:1433"

    environment:
      SA_PASSWORD: "tvxs721#3TTv"
      ACCEPT_EULA: "Y"
    healthcheck:
      test: /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P "tvxs721#3TTv" -Q "SELECT 1" || exit 1
 
      interval: 10s
      timeout: 10s
      retries: 10


  kubeapisqlserver:
    image: ${DOCKER_REGISTRY-}kubeapisqlserver
    build:
      context: .
      dockerfile: KubeApiSqlServer/Dockerfile
    ports:
      - 82:80

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: db3-data
  name: db3-data
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
status: {}

---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: postgress
  name: postgress
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
status: {}

---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: redis-conf
  name: redis-conf
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
status: {}

---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: redis-data
  name: redis-data
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
status: {}

---

apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: C:\WINDOWS\system32\kompose.exe convert
    kompose.version: 1.21.0 (992df58d8)
  creationTimestamp: null
  labels:
    io.kompose.service: postgress
  name: postgress
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: postgress
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        kompose.cmd: C:\WINDOWS\system32\kompose.exe convert
        kompose.version: 1.21.0 (992df58d8)
      creationTimestamp: null
      labels:
        io.kompose.service: postgress
    spec:
      containers:
      - env:
        - name: POSTGRES_PASSWORD
          value: postgres
        - name: POSTGRES_USER
          value: postgres
        image: postgres:14.1-alpine
        imagePullPolicy: ""
        name: postgress
        ports:
        - containerPort: 5432
        resources: {}
        volumeMounts:
        - mountPath: /var/lib/postgresql/data
          name: postgress
      restartPolicy: Always
      serviceAccountName: ""
      volumes:
      - name: postgress
        persistentVolumeClaim:
          claimName: postgress
status: {}


---

apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: C:\WINDOWS\system32\kompose.exe convert
    kompose.version: 1.21.0 (992df58d8)
  creationTimestamp: null
  labels:
    io.kompose.service: postgress
  name: postgress
spec:
  ports:
  - name: "5432"
    port: 5432
    targetPort: 5432
  selector:
    io.kompose.service: postgress
status:
  loadBalancer: {}

---





apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: C:\WINDOWS\system32\kompose.exe convert
    kompose.version: 1.21.0 (992df58d8)
  creationTimestamp: null
  labels:
    io.kompose.service: redis
  name: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: redis
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        kompose.cmd: C:\WINDOWS\system32\kompose.exe convert
        kompose.version: 1.21.0 (992df58d8)
      creationTimestamp: null
      labels:
        io.kompose.service: redis
    spec:
      containers:
      - args:
        - redis-server
        - --save
        - "20"
        - "1"
        - --loglevel
        - warning
        env:
        - name: ALLOW_EMPTY_PASSWORD
          value: "yes"
        image: redis:latest
        imagePullPolicy: ""
        name: redis
        ports:
        - containerPort: 6379
        resources: {}
        volumeMounts:
        - mountPath: /data
          name: redis-data
        - mountPath: /usr/local/etc/redis/redis.conf
          name: redis-conf
      restartPolicy: Always
      serviceAccountName: ""
      volumes:
      - name: redis-data
        persistentVolumeClaim:
          claimName: redis-data
      - name: redis-conf
        persistentVolumeClaim:
          claimName: redis-conf
status: {}

---

apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: C:\WINDOWS\system32\kompose.exe convert
    kompose.version: 1.21.0 (992df58d8)
  creationTimestamp: null
  labels:
    io.kompose.service: redis
  name: redis
spec:
  ports:
  - name: "6379"
    port: 6379
    targetPort: 6379
  selector:
    io.kompose.service: redis
status:
  loadBalancer: {}

---


apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: C:\WINDOWS\system32\kompose.exe convert
    kompose.version: 1.21.0 (992df58d8)
  creationTimestamp: null
  labels:
    io.kompose.service: sqldata
  name: sqldata
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: sqldata
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        kompose.cmd: C:\WINDOWS\system32\kompose.exe convert
        kompose.version: 1.21.0 (992df58d8)
      creationTimestamp: null
      labels:
        io.kompose.service: sqldata
    spec:
      containers:
      - env:
        - name: ACCEPT_EULA
          value: "Y"
        - name: SA_PASSWORD
          value: tvxs721#3
        image: mcr.microsoft.com/mssql/server:2019-latest
        imagePullPolicy: ""
        name: sqldata
        ports:
        - containerPort: 1433
        resources: {}
        volumeMounts:
        - mountPath: /var/lib/mysql/data
          name: db3-data
      restartPolicy: Always
      serviceAccountName: ""
      volumes:
      - name: db3-data
        persistentVolumeClaim:
          claimName: db3-data
status: {}

---

apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: C:\WINDOWS\system32\kompose.exe convert
    kompose.version: 1.21.0 (992df58d8)
  creationTimestamp: null
  labels:
    io.kompose.service: sqldata
  name: sqldata
spec:
  ports:
  - name: "1433"
    port: 1433
    targetPort: 1433
  selector:
    io.kompose.service: sqldata
status:
  loadBalancer: {}

---




apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: C:\WINDOWS\system32\kompose.exe convert
    kompose.version: 1.21.0 (992df58d8)
  creationTimestamp: null
  labels:
    io.kompose.service: testkind
  name: testkind
spec:
  ports:
  - name: "5000"
    port: 5000
    targetPort: 80
  selector:
    io.kompose.service: testkind
status:
  loadBalancer: {}

---

apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: C:\WINDOWS\system32\kompose.exe convert
    kompose.version: 1.21.0 (992df58d8)
  creationTimestamp: null
  labels:
    io.kompose.service: testkind
  name: testkind
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: testkind
  strategy: {}
  template:
    metadata:
      annotations:
        kompose.cmd: C:\WINDOWS\system32\kompose.exe convert
        kompose.version: 1.21.0 (992df58d8)
      creationTimestamp: null
      labels:
        io.kompose.service: testkind
    spec:
      containers:
      - image: dfrazzitta/testkind
        imagePullPolicy: ""
        name: testkind
        ports:
        - containerPort: 80
        resources: {}
      restartPolicy: Always
      serviceAccountName: ""
      volumes: null
status: {}

---

apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: C:\WINDOWS\system32\kompose.exe convert
    kompose.version: 1.21.0 (992df58d8)
  creationTimestamp: null
  labels:
    io.kompose.service: teswebapi
  name: teswebapi
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: teswebapi
  strategy: {}
  template:
    metadata:
      annotations:
        kompose.cmd: C:\WINDOWS\system32\kompose.exe convert
        kompose.version: 1.21.0 (992df58d8)
      creationTimestamp: null
      labels:
        io.kompose.service: teswebapi
    spec:
      containers:
      - image: dfrazzitta/teswebapi
        imagePullPolicy: "Always"
        name: teswebapi
        ports:
        - containerPort: 80
        resources: {}
      restartPolicy: Always
      serviceAccountName: ""
      volumes: null
status: {}

---

apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: C:\WINDOWS\system32\kompose.exe convert
    kompose.version: 1.21.0 (992df58d8)
  creationTimestamp: null
  labels:
    io.kompose.service: teswebapi
  name: teswebapi
spec:
  ports:
  - name: "5001"
    port: 80
    targetPort: 80
  selector:
    io.kompose.service: teswebapi
status:
  loadBalancer: {}

---


apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: test-ingress
  annotations: null
spec:
  ingressClassName: nginx
  rules:
    - host: krap.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: testkind
                port:
                  number: 5000
